{"version":3,"sources":["components/Header.js","components/SearchForm.js","components/EmployeeList.js","utils/API.js","components/SearchResultContainer.js","App.js","serviceWorker.js","index.js"],"names":["styles","headerStyle","background","borderBottom","color","h1Style","fontWeight","Header","className","style","formStyle","width","margin","SearchForm","props","onChange","handleNameSearchFilter","value","search","name","type","placeholder","id","EmployeeList","console","log","results","forEach","employee","year","dob","date","substring","month","day","formattedDOB","map","result","key","src","picture","medium","alt","first","last","cell","href","email","axios","get","tableStyle","SearchResultContainer","state","resultsTotal","getEmployeeInfo","API","then","res","setState","data","catch","err","event","target","filter","elem","toLowerCase","indexOf","handleNameSort","sort","a","b","nameA","nameB","comparison","this","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a748fd0f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst styles = {\n  headerStyle: {\n    background: \"#445c6b\",\n    borderBottom: \"10px solid #70B096\",\n    color: \"white\"\n  },\n  h1Style: {\n    fontWeight: 800\n  }\n};\n\nfunction Header() {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\" style={styles.headerStyle}>\n      <div className=\"container text-center\">\n        <h1 style={styles.h1Style} className=\"display-4\">\n          Employee Directory\n        </h1>\n        <p className=\"lead\">\n          Click \"Name\" to sort by name, or use the search box to narrow your\n          results.\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nconst style = {\n  formStyle: {\n    width: \"250px\",\n    margin: \"auto\"\n  }\n};\n\nfunction SearchForm(props) {\n  return (\n    <form style={style.formStyle}>\n      <div className=\"form-group\">\n        <input\n          onChange={props.handleNameSearchFilter}\n          value={props.search}\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search by Name\"\n          id=\"search\"\n        />\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React from \"react\";\n\nfunction EmployeeList(props) {\n  console.log(\"props\", props);\n\n  // Format the date to month-day-year\n  props.results.forEach(function (employee) {\n    const year = employee.dob.date.substring(0, 4);\n    const month = employee.dob.date.substring(5, 7);\n    const day = employee.dob.date.substring(8, 10);\n\n    employee.formattedDOB = month + \"-\" + day + \"-\" + year;\n  });\n\n  return (\n    <tbody>\n      {props.results.map((result) => (\n        <tr key={result.id}>\n          <td>\n            <img src={result.picture.medium} alt=\"Employee\" />\n          </td>\n          <td>\n            {result.name.first} {result.name.last}\n          </td>\n          <td>{result.cell}</td>\n          <td>\n            <a href={`mailto:{${result.email}}`}>{result.email}</a>\n          </td>\n          <td>{result.formattedDOB}</td>\n        </tr>\n      ))}\n    </tbody>\n  );\n}\n\nexport default EmployeeList;\n","import axios from \"axios\";\n\nexport default {\n  // Gets all users\n  getUsers: function () {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n  }\n};\n","import React, { Component } from \"react\";\nimport SearchForm from \"./SearchForm\";\nimport EmployeeList from \"./EmployeeList\";\nimport API from \"../utils/API\";\n\n// Styling for table\nconst style = {\n  tableStyle: {\n    width: \"85%\",\n    margin: \"auto\"\n  }\n};\n\nclass SearchResultContainer extends Component {\n  state = {\n    search: \"\",\n    results: [],\n    resultsTotal: []\n  };\n\n  componentDidMount() {\n    this.getEmployeeInfo();\n  }\n\n  // Call API to get employee info\n  getEmployeeInfo = () => {\n    API.getUsers()\n      .then((res) => {\n        console.log(\"API CALL\", res);\n        this.setState({\n          results: res.data.results,\n          resultsTotal: res.data.results\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  // Upon change to the search form, filter resultsTotal and pass it to results\n  handleNameSearchFilter = (event) => {\n    const name = event.target.name;\n    const value = event.target.value;\n    console.log(value);\n    this.setState({\n      [name]: value,\n      results: this.state.resultsTotal.filter(\n        (elem) =>\n          (\n            elem.name.first.toLowerCase() +\n            \" \" +\n            elem.name.last.toLowerCase()\n          ).indexOf(value.toLowerCase()) !== -1\n      )\n    });\n  };\n\n  // Upon click of \"Name\" header, sort in alphabetical order\n  handleNameSort = (event) => {\n    function compare(a, b) {\n      const nameA = a.name.first.toLowerCase();\n      const nameB = b.name.first.toLowerCase();\n\n      let comparison = 0;\n      if (nameA > nameB) {\n        comparison = 1;\n      } else if (nameA < nameB) {\n        comparison = -1;\n      }\n      return comparison;\n    }\n    this.setState({ results: this.state.resultsTotal.sort(compare) });\n  };\n\n  render() {\n    return (\n      <div>\n        <SearchForm\n          search={this.state.search}\n          handleNameSearchFilter={this.handleNameSearchFilter}\n        />\n        <br></br>\n        <table className=\"table table-striped\" style={style.tableStyle}>\n          <thead>\n            <tr>\n              <th>Image</th>\n              <th id=\"nameSort\" onClick={this.handleNameSort}>\n                Name\n              </th>\n              <th>Phone</th>\n              <th>Email</th>\n              <th>DOB</th>\n            </tr>\n          </thead>\n          <EmployeeList results={this.state.results} />\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default SearchResultContainer;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport SearchResultContainer from \"./components/SearchResultContainer\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <SearchResultContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}